apiVersion: template.openshift.io/v1
kind: Template
labels:
  app: ${NAME}-${ZONE}
  app.kubernetes.io/part-of: ${NAME}-${ZONE}
parameters:
  - name: NAME
    description: Module name
    value: nr-ticdi
  - name: COMPONENT
    description: Component name
    value: backend
  - name: ZONE
    description: Deployment zone, e.g. pr-### or prod
    required: true
  - name: IMAGE_TAG
    description: Image tag to use
    value: latest
  - name: DOMAIN
    value: apps.silver.devops.gov.bc.ca
  - name: CPU_REQUEST
    value: 100m
  - name: MEMORY_REQUEST
    value: 0.5Gi
  - name: REGISTRY
    description: Container registry to import from (internal is image-registry.openshift-image-registry.svc:5000)
    value: ghcr.io
  - name: PROMOTE
    description: Image (namespace/name:tag) to promote/import
    value: bcgov/nr-ticdi:prod-backend
objects:
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      lookupPolicy:
        local: false
      tags:
        - name: ${IMAGE_TAG}
          from:
            kind: DockerImage
            name: ${REGISTRY}/${PROMOTE}
          referencePolicy:
            type: Local
  - apiVersion: v1
    kind: Secret
    metadata:
      name: ticdi-sessions
      labels:
        app: ${NAME}
    stringData:
      cookie_secret: ${cookie_secret}
      session_secret: ${session_secret}  
  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: ticdi-sessions
      labels:
        app: ${NAME}-${ZONE}
    spec:
      accessModes:
        - ReadWriteMany
      resources:
        requests:
          storage: "256Mi"
      storageClassName: netapp-file-standard
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      replicas: 1
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - ${NAME}
            from:
              kind: ImageStreamTag
              name: ${NAME}-${ZONE}-${COMPONENT}:${IMAGE_TAG}
      selector:
        deploymentconfig: ${NAME}-${ZONE}-${COMPONENT}
      strategy:
        type: Rolling
      template:
        metadata:
          labels:
            app: ${NAME}-${ZONE}
            deploymentconfig: ${NAME}-${ZONE}-${COMPONENT}
        spec:
          volumes:
            - name: ticdi-sessions
              persistentVolumeClaim:
                claimName: ticdi-sessions
          containers:
            - image: ${NAME}-${ZONE}-${COMPONENT}:${IMAGE_TAG}
              imagePullPolicy: Always
              name: ${NAME}
              env:
                - name: POSTGRESQL_HOST
                  value: ${NAME}-${ZONE}-database
                - name: POSTGRESQL_DATABASE
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}-database
                      key: database-name
                - name: POSTGRESQL_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}-database
                      key: database-password
                - name: POSTGRESQL_USER
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}-database
                      key: database-user
                - name: cookie_secret
                  valueFrom:
                    secretKeyRef:
                      name: ticdi-sessions
                      key: cookie_secret
                - name: session_secret
                  valueFrom:
                    secretKeyRef: 
                      name: ticdi-sessions
                      key: session_secret
                - name: keycloak_base_url
                  valueFrom:
                    secretKeyRef: 
                      name: keycloak
                      key: keycloak_base_url
                - name: keycloak_realm
                  valueFrom:
                    secretKeyRef: 
                      name: keycloak
                      key: keycloak_realm
                - name: keycloak_client_id
                  valueFrom:
                    secretKeyRef: 
                      name: keycloak
                      key: keycloak_client_id
                - name: keycloak_secret
                  valueFrom:
                    secretKeyRef: 
                      name: keycloak
                      key: keycloak_secret
                - name: cdogs_service_client_id
                  valueFrom:
                    secretKeyRef: 
                      name: cdogs
                      key: cdogs_service_client_id
                - name: cdogs_service_client_secret
                  valueFrom:
                    secretKeyRef: 
                      name: cdogs
                      key: cdogs_service_client_secret
                - name: cdogs_url
                  valueFrom:
                    secretKeyRef: 
                      name: cdogs
                      key: cdogs_url
                - name: cdogs_token_endpoint
                  valueFrom:
                    secretKeyRef: 
                      name: cdogs
                      key: cdogs_token_endpoint
                - name: users_api_base_url
                  valueFrom:
                    secretKeyRef: 
                      name: css-users-api
                      key: users_api_base_url
                - name: css_environment
                  valueFrom:
                    secretKeyRef: 
                      name: css-users-api
                      key: css_environment
                - name: integration_id
                  valueFrom:
                    secretKeyRef: 
                      name: css-users-api
                      key: integration_id
                - name: users_api_token_url
                  valueFrom:
                    secretKeyRef: 
                      name: css-users-api
                      key: users_api_token_url
                - name: users_api_client_id
                  valueFrom:
                    secretKeyRef: 
                      name: css-users-api
                      key: users_api_client_id
                - name: users_api_client_secret
                  valueFrom:
                    secretKeyRef: 
                      name: css-users-api
                      key: users_api_client_secret
              ports:
                - containerPort: 3000
                  protocol: TCP
              resources:
                requests:
                  cpu: ${CPU_REQUEST}
                  memory: ${MEMORY_REQUEST}
              readinessProbe:
                httpGet:
                  path: /report
                  port: 3000
                  scheme: HTTP
                initialDelaySeconds: 60
                periodSeconds: 15
                timeoutSeconds: 5
              livenessProbe:
                successThreshold: 1
                failureThreshold: 3
                httpGet:
                  path: /report
                  port: 3000
                  scheme: HTTP
                initialDelaySeconds: 60
                periodSeconds: 30
                timeoutSeconds: 5
              securityContext:
                allowPrivilegeEscalation: true
              volumeMounts:
                - mountPath: /mnt/sessions
                  name: ticdi-sessions
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      ports:
        - name: 3000-tcp
          protocol: TCP
          port: 3000
          targetPort: 3000
      selector:
        deploymentconfig: ${NAME}-${ZONE}-${COMPONENT}
#  - apiVersion: route.openshift.io/v1
#    kind: Route
#    metadata:
#      labels:
#        app: ${NAME}-${ZONE}
#      name: ${NAME}-${ZONE}-${COMPONENT}
#    spec:
#      host: ${NAME}-${ZONE}-${COMPONENT}.${DOMAIN}
#      port:
#        targetPort: 3000-tcp
#      to:
#        kind: Service
#        name: ${NAME}-${ZONE}-${COMPONENT}
#        weight: 100
#      tls:
#        termination: edge
#        insecureEdgeTerminationPolicy: Redirect
